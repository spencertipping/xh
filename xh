#!/usr/bin/env perl
#<body style='display:none'><script type='xh'>
BEGIN {eval(our $xh_bootstrap = <<'_')}

# xh | https://github.com/spencertipping/xh
# Copyright (C) 2014, Spencer Tipping
# Licensed under the terms of the MIT source code license
use 5.014;
package xh;
our %modules;
our @module_ordering;
our %eval_numbers = (1 => '$xh_bootstrap');

sub with_eval_rewriting(&) {
  my @result = eval {$_[0]->(@_[1..$#_])};
  die $@ =~ s/\(eval (\d+)\)/$eval_numbers{$1}/egr if $@;
  @result;
}

sub named_eval {
  my ($name, $code) = @_;
  $eval_numbers{$1 + 1} = $name if eval('__FILE__') =~ /\(eval (\d+)\)/;
  with_eval_rewriting {eval $code; die $@ if $@};
}

our %compilers = (
  pl => sub {
    my $package = $_[0] =~ s/\./::/gr;
    eval {named_eval $_[0], "{package ::$package;\n$_[1]\n}"};
    die "error compiling module $_[0]: $@" if $@;
  },
  html => sub {});

sub defmodule {
  my ($name, $code, @args) = @_;
  chomp($modules{$name} = $code);
  push @module_ordering, $name;
  my ($base, $extension) = split /\.(\w+$)/, $name;
  die "undefined module extension '$extension' for $name"
    unless exists $compilers{$extension};
  $compilers{$extension}->($base, $code, @args);
}

chomp($modules{bootstrap} = $::xh_bootstrap);
undef $::xh_bootstrap;
sub image {
  join "\n", "#!/usr/bin/env perl",
             "#<body style='display:none'><script type='xh'>",
             "BEGIN {eval(our \$xh_bootstrap = <<'_')}",
             $modules{bootstrap},
             '_',
             map("BEGIN {xh::defmodule('$_', <<'_')}\n$modules{$_}\n_",
                 grep !/\.html$/, @module_ordering),
             "#</" . "script>",
             map("BEGIN {xh::defmodule('$_', <<'_')}\n$modules{$_}\n_",
                 grep /\.html$/, @module_ordering),
             "xh::main::main;\n__DATA__";
}
_
BEGIN {xh::defmodule('xh::baseparser.pl', <<'_')}
# TODO
_
BEGIN {xh::defmodule('xh::baseevaluator.pl', <<'_')}
# TODO
_
BEGIN {xh::defmodule('xh::main.pl', <<'_')}
sub main {
  print ::xh::image;
}
_
#</script>
BEGIN {xh::defmodule('dom.html', <<'_')}
<div id='dom'>
<span class='title'>xh</span>
</div>
_
BEGIN {xh::defmodule('js-dependencies.html', <<'_')}
<script src='http://code.jquery.com/jquery.min.js'></script>
<script src='http://caterwauljs.org/build/caterwaul.min.js'></script>
<script src='http://caterwauljs.org/build/caterwaul.std.min.js'></script>
<script src='http://caterwauljs.org/build/caterwaul.ui.min.js'></script>
_
BEGIN {xh::defmodule('css.html', <<'_')}
<style>
/*BEGIN {xh::defmodule('introspection.css', <<'_')}*/
@import url(http://fonts.googleapis.com/css?family=Abel|Fira+Mono);
body {background:   #080808;
      color:        #eae8e4;
      margin:       auto;
      max-width:    700px;
      overflow-y:   scroll;
      padding-left: 14px;
      border-left:  solid 1px #383736}

h1 {font-family: 'Abel', monospace;
    font-weight: normal;
    font-size:   20px}

h1:hover {color: #878177}
h1 .suffix {color: #878177}
h1 .suffix:before {content: '.'; color: #878177}

pre {font-family: 'Fira Mono', monospace;
      font-size:  10px}

#dom   {margin: 20px 0}
.title {color:       #f85421;
        font-family: 'Abel', sans-serif}
/*_*/
</style>
_
BEGIN {xh::defmodule('introspection.html', <<'_')}
<script>
/*BEGIN {xh::defmodule('introspection.js', <<'_')}*/
$(caterwaul(':all')(function () {
  $('body').empty() /~prepend/ jquery[head /append(css)]
                    /~append/  dom
                    /~append/  ui_for(parsed_modules)
                    /~css/     {display: 'block'},
  where [
  css               = $('style'),
  dom               = $('#dom'),
  self              = +$('script, style') *[$(x).html()] /seq /~join/ '\n',
  parse_modules(ls) = xs -se [ls *!process_line -seq]
-where [xs              = {__ordering: []},
    name            = null,
    text            = '',
    process_line(s) = /^(?:\/\*)?BEGIN.*defmodule\('([^']+)'.*\)/.exec(s)
            -re [it ? name /eq[it[1]] -then- text /eq['']
                    : /^(?:\/\*)?_(?:\*\/)?$/.test(s)
                      ? name -ocq- 'bootstrap.pl'
                        -then- xs[name] /eq [text /~substr/ 1]
                        -then- xs.__ordering /~push/ name
                    : text += '\n#{s}']],

  parsed_modules    = self.split(/\n/) /!parse_modules,
  ui_for(modules)   = ui -se [sections *![ui /~append/ x] -seq]
-where [ui             = jquery in div,
    toggle()       = $(this).next().toggle(),
    module_name(x) = jquery [span.prefix /text(pieces[0])
                           + span.suffix /text(pieces[1])]
                     -where [pieces = x.split(/\./, 2)],
    sections       = modules.__ordering
                     *[jquery in h1 /append(x /!module_name)
                                    /css({cursor: 'pointer'})
                                    /click(toggle)
                               + pre /text(modules[x])
                                     /hide()] -seq]]}));
/*_*/
</script>
_
xh::main::main;
__DATA__