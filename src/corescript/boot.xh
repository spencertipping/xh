BEGIN {xh::defmodule('xh::coreboot.xh', <<'_')}
(def destructuring-bind1
  (fn* outer        # outer = [template value bindings]
    (if (== literal (realtype (get $outer 0)))
      (assoc (get $outer 2) (get $outer 0) (get $outer 1))
      (if (if (== array (realtype (get $outer 0)))
            y
            (== hash (realtype (get $outer 0))))
        (reduce (fn* k
                  (delay [$k] destructuring-bind1
                              (get (get $outer 0) (get $k 1))
                              (get (get $outer 1) (get $k 1))
                              (get $k 0)))
                (get $outer 2)
                (keys (get $outer 0)))
        (get $outer 2)))))

(def fn1
  (fn* args
    (fn* (get $args 0)
      (scope (destructuring-bind1 (get $args 1)
                                  (var (get $args 0))
                                  {})
        (get $args 2)))))

(def fn
  (fn1 fn~ [formals body]
    ((fn1 gs~ [gs]
       (fn* $gs
         (scope (delay [$gs]
                 delay [$gs]
                 destructuring-bind1 $formals (var $gs) {})
           $body)))
     (str : (delay [$formals $body]
             delay [$formals $body]
             hashcode [$formals $body])))))

(def defn
  (fn [name formals body]
    (def $name (fn $formals $body))))

(defn and2 [x y] (if $x $y ''))
(defn or2  [x y] (if $x $x $y))
(defn not  [x]   (if $x '' y))
(defn xor2 [x y] (and2 (or2 $x $y) (not (and2 $x $y))))

(defn map1     [f xs] (flatmap1 (fn [x] [($f $x)]) $xs))
(defn filter1  [f xs] (flatmap1 (fn [x] (if (f $x) [$x] [])) $xs))
(defn flatmap1 [f xs] (reduce (fn [ys x] (into $ys ($f $x)))
                              (empty $xs)
                              $xs))

(defn reverse [xs] (reduce (fn [ys x] (into [$x] $ys))
                           []
                           $xs))

(defn partial fs (let1 [f] $fs (fn xs (apply $f (into (slice $fs 1) $xs)))))
(defn comp    fs (fn xs (get (reduce (fn [x f] [(apply $f $x)])
                                     $xs
                                     (reverse $fs))
                             0)))

(defn inc [x] (i+ $x 1))
(defn dec [x] (i- $x 1))
(defn let1 [k v body] ((delay [$k] fn [$k] $body) $v))

(defn first [[x]] $x)
(defn rest  [xs]  (slice $xs 1))
(defn last  [xs]  (get $xs (dec (count $xs))))

(defn .. args
  (let1 [x] $args
    (delay [$x]
     delay [$x]
     apply list delay [$x] (rest $args))))

(defn ->> forms
  (reduce (fn [x l] (.. $l let1 _ $x $l))
          (first $forms)
          (rest $forms)))

(defn let [kvs body]
  (->> (count $kvs)
       (iota (i>> $_ 1))
       (map1 (partial i* 2) $_)
       (map1 (fn [i] [(get $kvs $i) (get $kvs (inc $i))]) $_)
       (reduce (fn [code [k v]] (.. $k let1 $k $v $code))
               $body
               $_)))

(defn cond clauses
  (->> (count $clauses)
       (iota (i>> $_ 1))
       (map1 (partial i* 2) $_)
       (reduce (fn [code i]
                 (let [[c v] (map1 (partial get $clauses) [$i (inc $i)])]
                   (if $c $v $code)))
               ''
               (reverse $_))))

# TODO: generalize (delay) into some kind of quoting/unquoting mechanism.
_
